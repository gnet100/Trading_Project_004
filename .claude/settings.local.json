{
  "permissions": {
    "allow": [
      "Bash(\"C:\\Users\\Golan\\miniconda3\\envs\\trading_project\\python.exe\" -c \"\nfrom sqlalchemy.orm import sessionmaker\nfrom src.enhanced_dna_models import create_enhanced_engine, EnhancedHistoricalData, TimeFrame, TradingSession\n\nengine = create_enhanced_engine()\nSession = sessionmaker(bind=engine)\nsession = Session()\n\nprint(''DNA Research System - 590 Records Complete Analysis'')\nprint(''='' * 55)\n\nprint()\nprint(''Data Architecture:'')\nprint(''   - Enhanced SQLAlchemy 2.0 Models'')\nprint(''   - Multi-timeframe DNA Database'') \nprint(''   - Dynamic Indicators Support'')\nprint(''   - Trade Simulation Framework'')\n\nprint()\nprint(''Time Coverage Details:'')\n\n# Time range\nearliest = session.query(EnhancedHistoricalData).order_by(\n    EnhancedHistoricalData.timestamp\n).first()\nlatest = session.query(EnhancedHistoricalData).order_by(\n    EnhancedHistoricalData.timestamp.desc()\n).first()\n\nprint(f''   Period: {earliest.timestamp.strftime(\"\"%Y-%m-%d\"\")} to {latest.timestamp.strftime(\"\"%Y-%m-%d\"\")}'')\nprint(f''   Symbols: MSTR, NVDA (2 major stocks)'')\nprint(f''   Timeframes: 6 levels (1min to daily)'')\n\n# Quality analysis\ntotal_records = session.query(EnhancedHistoricalData).count()\nhigh_quality = session.query(EnhancedHistoricalData).filter(\n    EnhancedHistoricalData.data_quality_score >= 95.0\n).count()\n\nprint(f''   Quality: {high_quality}/{total_records} records >95% quality'')\n\nprint()\nprint(''Timeframe Breakdown with Purpose:'')\n\ntimeframe_info = [\n    (''daily'', ''42 records'', ''30 trading days'', ''Long-term trend analysis''),\n    (''4hour'', ''20 records'', ''2 sessions/day x 5 days'', ''Swing trading patterns''),\n    (''1hour'', ''80 records'', ''8 hours/day x 5 days'', ''Intraday momentum''),\n    (''15min'', ''52 records'', ''26 bars x 1 day'', ''Short-term entries''),\n    (''5min'', ''156 records'', ''78 bars x 1 day'', ''Scalping analysis''),\n    (''1min'', ''240 records'', ''Last 2 hours detail'', ''Ultra-precise timing'')\n]\n\nfor tf, count, coverage, purpose in timeframe_info:\n    print(f''   {tf:>7}: {count:>11} | {coverage:>22} | {purpose}'')\n\nprint()\nprint(''DNA Trading Simulation Data:'')\n\n# DNA statistics\ntotal_signals = session.query(EnhancedHistoricalData).filter(\n    EnhancedHistoricalData.dna_entry_signal == True\n).count()\n\ncompleted_trades = session.query(EnhancedHistoricalData).filter(\n    EnhancedHistoricalData.dna_pnl.isnot(None)\n).count()\n\nprint(f''   Entry Signals: {total_signals} DNA opportunities identified'')\nprint(f''   Completed Trades: {completed_trades} with full P&L calculation'')\nprint(f''   Strategy: LONG-only with fixed risk management'')\nprint(f''   Risk Profile: Stop Loss -2.8, Take Profit +3.2'')\nprint(f''   Position Size: 50 shares per trade'')\n\nprint()\nprint(''Data Indicators Coverage:'')\n\n# Count records with indicators\nbollinger_count = session.query(EnhancedHistoricalData).filter(\n    EnhancedHistoricalData.bollinger_upper.isnot(None)\n).count()\n\nvolume_count = session.query(EnhancedHistoricalData).filter(\n    EnhancedHistoricalData.volume_sma_20.isnot(None)\n).count()\n\nadx_count = session.query(EnhancedHistoricalData).filter(\n    EnhancedHistoricalData.adx_14.isnot(None)\n).count()\n\nprint(f''   Bollinger Bands: {bollinger_count} records'')\nprint(f''   Volume SMA(20): {volume_count} records'')\nprint(f''   ADX(14): {adx_count} records'')\n\nsession.close()\n\nprint()\nprint(''System Status: FULLY OPERATIONAL'')\nprint(''Ready for comprehensive DNA research and statistical analysis!'')\n\")"
    ],
    "deny": [],
    "ask": []
  }
}